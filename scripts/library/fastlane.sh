#!/bin/bash

# exit on failure
set -e

fastlane_integrate()
{
  # Temporary run clean command that removes Fastlane folder
  fastlane_clean
	fastlane_bootstrap
	fastlane_write $FASTLANE_FOLDER
}

#
# Creates Fastlane folder and initializes basic
#

fastlane_bootstrap()
{
  FASTLANE_FOLDER=$(find_dir 'fastlane')

  if [ ! -d "$FASTLANE_FOLDER" ]; then
    message "fastlane" "Fastlane folder not found, creating...." trace normal

    #
    # Attempt to create fastlane folder where workspace is
    #

    if [[ ! -z $WORKSPACE ]]; then
      FASTLANE_FOLDER=$(dirname $WORKSPACE)
    elif [[ ! -z $PROJECT ]]; then
      FASTLANE_FOLDER=$(dirname $PROJECT)
    fi

    FASTLANE_FOLDER="$FASTLANE_FOLDER/fastlane"

    #
    # Fastlane has to be placed in the same folder as xcworkspace.
    #

    message "fastlane" "Creating fastlane directory..." trace normal

  	mkdir -p $FASTLANE_FOLDER

    message "fastlane" "Fastlane Directory Created: $FASTLANE_FOLDER" debug normal
  fi
}

fastlane_clean()
{
  message "fastlane" "Cleaning up Fastlane folder...." trace normal

  local FASTLANE_FOLDER=$(find_dir 'fastlane')

  rm -rf $FASTLANE_FOLDER
}

#
# Write Fastlane file according to configuration
#

fastlane_write()
{
  FASTLANE_APPFILE=$(find_file 'appfile')
  FASTLANE_FASTFILE=$(find_file 'fastfile')

  message "fastlane" "Searching for Fastlane configuration files in $1..." trace normal

  #
  # App file
  #

  if [[ ! -f $FASTLANE_APPFILE ]]; then
    message "fastlane" "Fastlane Appfile not found, creating at $1/Appfile" trace normal

  	touch "$1/Appfile"
  	FASTLANE_APPFILE="$1/Appfile"

  else
  	# Move Fastlane App File
    message "fastlane" "Fastlane Appfile found, but in wrong directory. Moving..." trace normal
  fi

  message "fastlane" "Writing Fastlane Appfile..." trace normal

  fastlane_app_write $FASTLANE_APPFILE

  message "fastlane" "Written Fastlane Appfile at: $FASTLANE_APPFILE" debug normal

  #
  # Fastfile
  #

  if [[ ! -f $FASTLANE_FASTFILE ]]; then
    message "fastlane" "Fastlane Fastfile not found, creating at $1/Fastfile" trace normal

  	touch "$1/Fastfile"

  	#
  	# Write app file
  	#
    
    FASTLANE_FASTFILE="$1/Fastfile"
  	
  else
  	# Move Fastlane App File
    message "fastlane" "Fastlane Fastfile found, but in wrong directory. Moving..." trace normal
  fi

  message "fastlane" "Writing Fastlane Fastfile..." trace normal

  fastlane_file_write $FASTLANE_FASTFILE

  message "fastlane" "Written Fastlane Fastfile at: $FASTLANE_FASTFILE" debug normal
}

#
# Write fastlane Appfile with data
#
fastlane_app_write()
{
  echo '# Dominus: Autogenerated Appfile: '$SCRIPT_VERSION > $1

  fastlane_new_line $1

  if [[ ! -z $BUNDLE_IDENTIFIER ]]; then
    echo 'app_identifier "'$BUNDLE_IDENTIFIER'"' >> $1
  fi

  if [[ ! -z $APPLE_DEV_PORTAL_ID ]]; then
    echo 'apple_dev_portal_id "'$APPLE_DEV_PORTAL_ID'"' >> $1
  fi

  if [[ ! -z $ITUNES_CONNECT_ID ]]; then
  	echo 'itunes_connect_id "'$APPLE_DEV_PORTAL_ID'"' >> $1
  fi

  if [[ ! -z $APPLE_ID ]]; then
  	echo 'apple_id "'$APPLE_ID'"' >> $1
  fi

  if [[ ! -z $TEAM_ID ]]; then
  	echo 'team_id "'$TEAM_ID'"' >> $1
  fi
}

#
# Write fastlane Fastfile with data
#
fastlane_file_write()
{
  echo '# Dominus: Autogenerated Fastfile: '$SCRIPT_VERSION > $1
  fastlane_new_line $1
  #
  # Write current Fastlane version
  #

  FASTLANE_VERSION=$(fastlane_version)

  echo 'fastlane_version "'$FASTLANE_VERSION'"' >> $1
  fastlane_new_line $1

  #
  # Write platform, default to ios
  #

  echo 'default_platform :'$BUILD_PLATFORM >> $1
  fastlane_new_line $1
  fastlane_new_line $1

  #
  # Generate platform Fastlane
  #

  echo 'platform :'$BUILD_PLATFORM' do' >> $1

  fastlane_create_before_all $1

  fastlane_create_lane 'build' $1
  fastlane_create_lane 'test' $1
  fastlane_create_lane 'deploy' $1

  fastlane_create_after_all $1
  fastlane_create_error $1

  echo 'end' >> $1
}

fastlane_create_lane()
{
  echo '  lane :'$1' do' >> $2

  if [ "$1" == "deploy" ]; then
    fastlane_create_deploy $2
  elif [ "$1" == "test" ]; then
  	fastlane_create_test $2
  elif [ "$1" == "build" ]; then
  	fastlane_create_build $2
  else
  	fastlane_create_build $2
  fi

  echo '  end' >> $2
  echo '' >> $2
}

fastlane_create_build()
{
  fastlane_cert $1
  fastlane_sigh $1
  fastlane_gym $1
}

fastlane_create_test()
{
  fastlane_scan $1
}

fastlane_create_deploy()
{
  fastlane_cert $1
  fastlane_sigh $1
  fastlane_scan $1
  fastlane_gym $1
  fastlane_deliver $1
}

fastlane_create_before_all()
{
  echo '  before_all do' >> $1

  echo '  end' >> $1

  fastlane_new_line $1
}

fastlane_create_after_all()
{
  echo '  before_all do |lane|' >> $1

  echo '  end' >> $1

  fastlane_new_line $1
}

fastlane_create_error()
{
  echo '  error do |lane, exception|' >> $1

  echo '  end' >> $1

  fastlane_new_line $1
}

fastlane_gym()
{
  echo 'gym'
}

fastlane_scan()
{
  #
  # Test command that will get written
  #
  local TEST_COMMAND_PARAMETERS='some: test, haha: test, '

  #
  # Generate Scan variables
  #

  if [[ ! -f $SCAN_FILE ]]; then
  	fastlane_env_variable 'SCAN_SCHEME' $SCHEME $1

    if [[ ! -z $WORKSPACE ]]; then
      fastlane_env_variable 'SCAN_WORKSPACE' $WORKSPACE $1
    elif [[ ! -z $PROJECT ]]; then
      fastlane_env_variable 'SCAN_PROJECT' $PROJECT $1
    fi

    if [[ ! -z $TEST_DEVICE ]]; then
      fastlane_env_variable 'SCAN_DEVICE' $TEST_DEVICE $1
    fi

    if [[ ! -z $BUILD_CONFIG ]]; then
      fastlane_env_variable 'SCAN_CONFIGURATION' $BUILD_CONFIG $1
    fi

    if [[ ! -z $TEST_SDK ]]; then
      astlane_env_variable 'SCAN_SDK' $TEST_SDK $1
    fi

    if [ "$GENERATE_CODE_COVERAGE" == true ]; then
      TEST_COMMAND_PARAMETERS=$TEST_COMMAND_PARAMETERS"code_coverage: true, "
    fi
  fi

  fastlane_new_line $1

  #
  # Fix last command parameters and write command
  #

  TEST_COMMAND_PARAMETERS=$(echo $TEST_COMMAND_PARAMETERS | sed 's/,[[:blank:]]*$//g')

  echo '    scan('$TEST_COMMAND_PARAMETERS')' >> $1
}

fastlane_deliver()
{
  echo 'gym'
}

fastlane_cert()
{
echo 'gym'
}

fastlane_sigh()
{
echo 'gym'
}

fastlane_match()
{
echo 'gym'
}

#
# Runs fastlane on a specific lane
#

fastlane_execute()
{
	#
	# Do any extra preparation for running Fastlane (installing certificates)
	#
  echo 'gym'
}

fastlane_version()
{
  local FASTLANE_VERSION=$(fastlane --version)
  FASTLANE_VERSION="${FASTLANE_VERSION#fastlane}"
  FASTLANE_VERSION=$(trim $FASTLANE_VERSION)
  echo $FASTLANE_VERSION
}

fastlane_new_line()
{
  local OUTPUT=$FASTLANE_FASTFILE

  if [[ ! -z $1 ]]; then
    OUTPUT=$1
  fi

  echo '' >> $OUTPUT
}

fastlane_env_variable()
{
  local OUTPUT=$FASTLANE_FASTFILE

  if [[ ! -z $3 ]]; then
    OUTPUT=$3
  fi

  echo '    ENV["'$1'"] = "'$2'"' >> $OUTPUT
}